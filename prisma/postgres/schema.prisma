generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String
  role         String   @default("learner")
  skill_level  Int      @default(0)
  passwordHash String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  skills       UserSkill[]
  progresses   UserProgress[]
  projects     BPRProject[]
}

model UserSkill {
  id               String   @id @default(uuid())
  user             User     @relation(fields: [user_id], references: [id])
  user_id          String
  skill_area       String
  level            Int      @default(0)
  experiencePoints Int      @default(0)
  updated_at       DateTime @default(now())

  @@index([user_id, skill_area])
}

model LearningContent {
  id               String   @id @default(uuid())
  title            String
  content_type     String
  difficulty       String
  content_data_text Json
  ai_topics_text   String[]
  estimated_time   Int?
  created_at       DateTime @default(now())

  progresses    UserProgress[]
}

model UserProgress {
  id              String          @id @default(uuid())
  user            User            @relation(fields: [user_id], references: [id])
  user_id         String
  content         LearningContent @relation(fields: [content_id], references: [id])
  content_id      String
  status          String          @default("not-started")
  completion_rate Decimal         @db.Decimal(5, 2) @default(0)
  skill_points    Int             @default(0)
  started_at      DateTime?
  completed_at    DateTime?
  updated_at      DateTime        @default(now())

  @@index([user_id, content_id])
  @@unique([user_id, content_id], name: "user_id_content_id")
}

model BPRProject {
  id                   String    @id @default(uuid())
  user                 User      @relation(fields: [user_id], references: [id])
  user_id              String
  title                String
  description          String?
  current_process_text Json?
  target_process_text  Json?
  status               String    @default("planning")
  metrics_text         Json?
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt

  analyses        ProcessAnalysis[]

  @@index([user_id, status])
}

model ProcessAnalysis {
  id                   String     @id @default(uuid())
  project              BPRProject @relation(fields: [project_id], references: [id])
  project_id           String
  analysis_data_text   Json
  ai_confidence_score  Decimal?   @db.Decimal(3, 2)
  created_at           DateTime   @default(now())

  @@index([project_id])
}

model SuggestionFeedback {
  id            String           @id @default(uuid())
  user          User             @relation(fields: [user_id], references: [id])
  user_id       String
  analysis      ProcessAnalysis  @relation(fields: [analysis_id], references: [id])
  analysis_id   String
  suggestion_id String
  rating        String
  adopted       Boolean          @default(false)
  created_at    DateTime         @default(now())

  @@index([user_id, analysis_id])
}

model CaseStudy {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [user_id], references: [id])
  user_id     String
  title       String
  content     String
  tags_text   String[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@index([user_id])
}

model Question {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [user_id], references: [id])
  user_id     String
  title       String
  body        String
  tags_text   String[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  answers     Answer[]
}

model Answer {
  id          String   @id @default(uuid())
  question    Question @relation(fields: [question_id], references: [id])
  question_id String
  user        User     @relation(fields: [user_id], references: [id])
  user_id     String
  body        String
  created_at  DateTime @default(now())

  @@index([question_id])
}
